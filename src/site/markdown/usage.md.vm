## Velocity treats double hashes as comments, which messes with markdown files. So $H can be used instead.
#set( $H = '#' )

# Usage

Add the plugin to your pom:

    <build>
        <plugins>
            <plugin>
                <groupId>de.hilling.maven.release</groupId>
                <artifactId>smart-release-plugin</artifactId>
                <version>3.8</version>
                <configuration>
                    <testGoals>
                        <testGoal>clean</testGoal>
                        <testGoal>install</testGoal>
                        <testGoal>-Dmaven.javadoc.skip=true</testGoal>
                    </testGoals>
                    <releaseGoals>
                        <releaseGoal>deploy</releaseGoal>
                    </releaseGoals>
                    <releaseProfiles>
                        <releaseProfile>release</releaseProfile>
                    </releaseProfiles>
                </configuration>
            </plugin>
        </plugins>
    </build>

And then call the plugin:

	mvn smart-release:release

# Creating a bugfix release

To create a bugfix release, follow these steps:

* Create a branch from one of the tags created during a regular release. The `release-info.json` must exist.
* Fix your bugs.
* Create a bugfix release by running `mvn smart-release:release -DbugfixRelease=true`
* The same steps as above are run but a new bugfix number will be appended to the latest minor version number.

# Release-info format

Information about releases is kept in `.release-info.json`. Sample from the test projects:

    {
      "tagName": "MULTI_MODULE_RELEASE-2017-04-25-135920",
      "modules": [
        {
          "releaseDate": "2017-04-25T15:59:20.339+02:00[Europe/Berlin]",
          "releaseTag": "MULTI_MODULE_RELEASE-2017-04-25-135920",
          "artifact": {
            "groupId": "de.hilling.maven.release.testprojects.independentversions",
            "artifactId": "independent-versions"
          },
          "version": {
            "majorVersion": 1,
            "minorVersion": 0
          }
        },
        {
          "releaseDate": "2017-04-25T15:59:20.339+02:00[Europe/Berlin]",
          "releaseTag": "MULTI_MODULE_RELEASE-2017-04-25-135920",
          "artifact": {
            "groupId": "de.hilling.maven.release.testprojects.independentversions",
            "artifactId": "core-utils"
          },
          "version": {
            "majorVersion": 2,
            "minorVersion": 0
          }
        },
        {
          "releaseDate": "2017-04-25T15:59:20.339+02:00[Europe/Berlin]",
          "releaseTag": "MULTI_MODULE_RELEASE-2017-04-25-135920",
          "artifact": {
            "groupId": "de.hilling.maven.release.testprojects.independentversions",
            "artifactId": "console-app"
          },
          "version": {
            "majorVersion": 3,
            "minorVersion": 0
          }
        }
      ]
    }

You should not have to edit this file manually. In addition you must make sure that you do not merge
`.release-info.json` files from a bugfix branch into your master branch.

# Forcing a release

It is possible to force the release of one or more specified modules, for example if the changes have not been picked up due to some issue.
To do this, use the `forceRelease` parameter. For example:

	mvn smart-release:release -DforceRelease=MyApp

In this case the `MyApp` module will be built, even if there where no changes found.

# SSH authentication

Currently, only public key authentication is supported. By default, the plugin reads the private key from `~/.ssh/id_rsa`.
If it's required to use a private key file from another location, you have two opportunities to achieve this:

$H$H$H Add server section to your Maven settings

This is the preferred way. Firstly, add a server section to your Maven settings 
like this (see <https://maven.apache.org/settings.html#Servers> for further information):

	<settings>
		<servers>
			<server>
				<id>my-server</id>
				<privateKey>/path/to/your/private_key</privateKey>
				<passphrase>optional_passphrase</passphrase> <!-- This is optional -->
			</server>
		</servers>
	</settings>
	
If your key is password protected, specify the password within element **passphrase**. Tip: do _not confuse_ this with element **password**.

Secondly, specify the `serverId` in the plugin configuration
	
	<plugin>
		...
		<configuration>
			<serverId>my-server</serverId>
		</configuration>
	</plugin>	


$H$H$H Specify private key and optional passphrase in your POM

This is the insecure way to specify your custom private key. Add following properties to your plugin configuration:

	<plugin>
		...
		<configuration>
			<privateKey>/path/to/your/private_key</privateKey>
			<passphrase>optional_passphrase</passphrase> <!-- This is optional -->
		</configuration>
	</plugin>

Note: POM configuration has precedence over Maven settings.
	
# Custom known_hosts

Per default, the plugin uses `~/.ssh/known_hosts`. You can override this with following property in
your plugin configuration:

	<plugin>
		...
		<configuration>
			<knownHosts>/path/to/your/known_hosts</knownHosts>
		</configuration>
	</plugin>

Note: Maven settings related to `known_hosts` will _not_ be considered by the plugin.